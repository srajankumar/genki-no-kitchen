"use client";
import { useState } from "react";
import { createClient } from "@/utils/supabase/client";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";

import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";
import Navbar from "@/components/Navbar";

const MODEL_NAME = "gemini-1.0-pro";
const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY as string;

const Info = () => {
  const [name, setName] = useState("");
  const [quantity, setQuantity] = useState("");
  const [shelf, setShelf] = useState("");
  const [price, setPrice] = useState("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [data, setData] = useState<string>("");
  const { toast } = useToast();

  async function runChat(prompt: string) {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });

    const generationConfig = {
      temperature: 0.9,
      topK: 1,
      topP: 1,
      maxOutputTokens: 2048,
    };

    const safetySettings = [
      {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
    ];

    const chat = model.startChat({
      generationConfig,
      safetySettings,
      history: [
        {
          role: "user",
          parts: [{ text: "HELLO" }],
        },
        {
          role: "model",
          parts: [{ text: "Hello there! How can I assist you today?" }],
        },
      ],
    });

    const result = await chat.sendMessage(prompt);
    const response = result.response;
    setData(response.text());
  }

  const createUser = async () => {
    try {
      setIsLoading(true);
      const supabase = createClient();

      // Ask Gemini AI for the shelf life
      await runChat(
        `What's the typical storage time for ${name}, in days, months, or years?  Provide a single number if possible.`
      );

      // Now 'data' state should contain the shelf life generated by Gemini AI
      const shelfLife = data;

      // Insert item into the database
      const { error } = await supabase
        .from("item")
        .insert([{ name, quantity, price, shelf_life: shelfLife }]);
      if (error) {
        throw error;
      }
      setIsLoading(false);
      setName("");
      setQuantity("");
      setShelf("");
      setPrice("");
      toast({
        title: "Item added to inventory",
        variant: "success",
      });
    } catch (error) {
      toast({
        title: "Something went wrong",
        description: "Please try again later",
        variant: "destructive",
      });
      console.error("Error adding item:", error);
      setIsLoading(false);
    }
  };

  return (
    <div className="flex min-h-[100dvh] justify-center items-center">
      <div className="fixed z-50 bottom-0 left-0">
        <Navbar />
      </div>
      <div>
        <div className="flex flex-col gap-2 mb-4">
          <h1 className="text-3xl font-semibold">Add Items</h1>
        </div>
        <div className="flex justify-center items-center flex-col gap-3 w-80">
          <Input
            disabled={isLoading}
            type="text"
            placeholder="Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <Input
            disabled={isLoading}
            type="number"
            placeholder="Quantity"
            value={quantity}
            onChange={(e) => setQuantity(e.target.value)}
          />
          <Input
            disabled={isLoading}
            type="number"
            placeholder="Price"
            value={price}
            onChange={(e) => setPrice(e.target.value)}
          />
          <Button disabled={isLoading} className="w-full" onClick={createUser}>
            {isLoading && (
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                strokeLinecap="round"
                strokeLinejoin="round"
                className="mr-2 h-4 w-4 animate-spin"
              >
                <path d="M21 12a9 9 0 1 1-6.219-8.56" />
              </svg>
            )}{" "}
            Add Item
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Info;
